/* The following code was generated by JFlex 1.4.3 on 3/12/16 12:54 PM */

package ru.promakh.webstorm_cjsx.lang;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;

import com.intellij.lang.javascript.JSTokenTypes;
import org.coffeescript.lang.lexer.CoffeeScriptTokenTypes;
import ru.promakh.webstorm_cjsx.psi.CjsxTokenType;

/**
 * The CoffeeScript lexer is responsible for generating a token stream of any CoffeeScript source file.
 *
 * @author Michael Kessler, Andrey Vokin
 * @since 0.1.0
 */

public class CjsxLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYCLASSNAME = 30;
  public static final int YYSINGLEQUOTEHEREDOC = 18;
  public static final int YYDOUBLEQUOTEHEREDOC = 16;
  public static final int YYSINGLEQUOTESTRING = 12;
  public static final int YYREGEX = 20;
  public static final int YYFOR = 14;
  public static final int YYHEREGEX = 22;
  public static final int YYIDENTIFIER = 4;
  public static final int YYTHIS = 32;
  public static final int YYINTERPOLATION = 26;
  public static final int YYDOUBLEQUOTESTRING = 10;
  public static final int YYJAVASCRIPT = 8;
  public static final int YYNUMBER = 6;
  public static final int YYINITIAL = 0;
  public static final int YYQUOTEPROPERTY = 28;
  public static final int YYREGEXFLAG = 24;
  public static final int YYNORMAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13,  1,  1, 
    14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\110\1\26\2\1\1\33\22\0\1\32\1\61\1\70\1\34"+
    "\1\5\1\101\1\102\1\71\1\73\1\74\1\100\1\24\1\76\1\27"+
    "\1\22\1\62\1\11\1\13\6\15\1\107\1\10\1\25\1\75\1\77"+
    "\1\31\1\30\1\105\1\66\6\20\10\6\1\57\1\56\7\6\1\17"+
    "\2\6\1\63\1\2\1\64\1\104\1\7\1\72\1\44\1\12\1\21"+
    "\1\46\1\23\1\43\1\67\1\51\1\47\1\6\1\53\1\45\1\54"+
    "\1\42\1\14\1\50\1\6\1\36\1\41\1\35\1\37\1\55\1\52"+
    "\1\16\1\40\1\6\1\65\1\103\1\106\1\60\41\0\1\1\11\0"+
    "\1\3\12\0\1\3\4\0\1\3\5\0\27\3\1\0\7\3\30\3"+
    "\1\0\10\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\2\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\2\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\2\3\1\3\1\3\1\3\1\3\3\3\2\3\1\3\1\3\1\3"+
    "\2\3\1\3\3\3\2\3\4\3\1\3\2\3\1\3\3\3\3\3"+
    "\2\3\1\3\2\3\1\3\1\3\1\3\1\3\1\3\2\3\1\3"+
    "\1\3\2\3\1\3\1\3\2\3\1\3\3\3\1\3\1\3\1\3"+
    "\2\3\2\3\1\3\1\3\3\3\4\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\2\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\2\3\1\3"+
    "\1\3\1\3\1\3\1\3\3\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\7\3\2\3\1\3\2\3\2\3\1\3\1\3"+
    "\4\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\105\3"+
    "\1\3\33\3\22\3\4\0\14\3\16\0\5\3\7\0\1\3\1\0"+
    "\1\3\21\0\160\3\1\3\1\3\1\3\1\3\1\3\1\0\1\3"+
    "\1\3\2\0\1\3\3\3\10\0\1\3\1\0\3\3\1\0\1\3"+
    "\1\0\2\3\1\3\21\3\1\0\11\3\43\3\1\3\2\3\3\3"+
    "\3\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\5\3\1\3\1\3\1\0\1\3\1\3"+
    "\2\3\2\3\63\3\60\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\0\5\3"+
    "\2\0\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\2\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\2\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\11\0\46\3\2\0"+
    "\1\3\7\0\47\3\11\0\55\3\1\0\1\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\10\0\33\3\5\0\3\3\35\0\13\3\5\0"+
    "\40\3\1\3\12\3\25\3\12\4\4\0\2\3\1\3\143\3\1\0"+
    "\1\3\7\3\2\0\6\3\2\3\2\3\1\0\4\3\2\3\12\4"+
    "\3\3\2\0\1\3\20\0\1\3\1\3\36\3\33\3\2\0\131\3"+
    "\13\3\1\3\16\0\12\4\41\3\11\3\2\3\4\0\1\3\5\0"+
    "\26\3\4\3\1\3\11\3\1\3\3\3\1\3\5\3\22\0\31\3"+
    "\3\3\104\0\1\3\1\0\13\3\67\0\33\3\1\0\3\3\1\3"+
    "\66\3\1\3\1\3\1\3\1\3\3\3\10\3\4\3\1\3\2\3"+
    "\1\3\7\3\12\3\2\3\2\0\12\4\1\0\1\3\6\3\1\0"+
    "\7\3\1\0\1\3\2\3\1\0\10\3\2\0\2\3\2\0\26\3"+
    "\1\0\7\3\1\0\1\3\3\0\4\3\2\0\1\3\1\3\3\3"+
    "\4\3\2\0\2\3\2\0\2\3\1\3\1\3\10\0\1\3\4\0"+
    "\2\3\1\0\3\3\2\3\2\0\12\4\2\3\17\0\2\3\1\3"+
    "\1\0\6\3\4\0\2\3\2\0\26\3\1\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\2\3\2\0\1\3\1\0\3\3\2\3\4\0"+
    "\2\3\2\0\3\3\3\0\1\3\7\0\4\3\1\0\1\3\7\0"+
    "\12\4\2\3\3\3\1\3\13\0\2\3\1\3\1\0\11\3\1\0"+
    "\3\3\1\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0"+
    "\1\3\1\3\3\3\5\3\1\0\2\3\1\3\1\0\2\3\1\3"+
    "\2\0\1\3\17\0\2\3\2\3\2\0\12\4\21\0\1\3\2\3"+
    "\1\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0\2\3"+
    "\1\0\5\3\2\0\1\3\1\3\1\3\1\3\1\3\4\3\2\0"+
    "\2\3\2\0\2\3\1\3\10\0\1\3\1\3\4\0\2\3\1\0"+
    "\3\3\2\3\2\0\12\4\1\0\1\3\20\0\1\3\1\3\1\0"+
    "\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0"+
    "\2\3\3\0\2\3\3\0\3\3\3\0\14\3\4\0\2\3\1\3"+
    "\2\3\3\0\3\3\1\0\3\3\1\3\2\0\1\3\6\0\1\3"+
    "\16\0\12\4\21\0\3\3\1\0\10\3\1\0\3\3\1\0\27\3"+
    "\1\0\12\3\1\0\5\3\3\0\1\3\3\3\4\3\1\0\3\3"+
    "\1\0\4\3\7\0\2\3\1\0\2\3\6\0\2\3\2\3\2\0"+
    "\12\4\22\0\2\3\1\0\10\3\1\0\3\3\1\0\27\3\1\0"+
    "\12\3\1\0\5\3\2\0\1\3\1\3\1\3\1\3\5\3\1\0"+
    "\1\3\2\3\1\0\2\3\2\3\7\0\2\3\7\0\1\3\1\0"+
    "\2\3\2\3\2\0\12\4\1\0\2\3\17\0\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\51\3\2\0\1\3\3\3\4\3\1\0\3\3"+
    "\1\0\3\3\1\3\1\3\10\0\1\3\10\0\2\3\2\3\2\0"+
    "\12\4\12\0\6\3\2\0\2\3\1\0\22\3\3\0\30\3\1\0"+
    "\11\3\1\0\1\3\2\0\7\3\3\0\1\3\4\0\3\3\3\3"+
    "\1\0\1\3\1\0\10\3\22\0\2\3\15\0\60\3\1\3\2\3"+
    "\7\3\5\0\6\3\1\3\10\3\1\0\12\4\47\0\2\3\1\0"+
    "\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0"+
    "\7\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0"+
    "\4\3\1\3\2\3\6\3\1\0\2\3\1\3\2\0\5\3\1\0"+
    "\1\3\1\0\6\3\2\0\12\4\2\0\4\3\40\0\1\3\27\0"+
    "\2\3\6\0\12\4\13\0\1\3\1\0\1\3\1\0\1\3\4\0"+
    "\2\3\10\3\1\0\44\3\4\0\16\3\1\3\5\3\1\0\2\3"+
    "\5\3\13\3\1\0\44\3\11\0\1\3\71\0\53\3\2\3\4\3"+
    "\1\3\6\3\1\3\2\3\2\3\2\3\1\3\12\4\6\0\6\3"+
    "\2\3\2\3\4\3\3\3\1\3\3\3\2\3\7\3\3\3\4\3"+
    "\15\3\1\3\2\3\2\3\6\3\1\3\1\3\1\3\12\4\3\3"+
    "\1\3\2\0\46\3\1\0\1\3\5\0\1\3\2\0\53\3\1\0"+
    "\1\3\u014c\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3"+
    "\2\0\51\3\1\0\4\3\2\0\41\3\1\0\4\3\2\0\7\3"+
    "\1\0\1\3\1\0\4\3\2\0\17\3\1\0\71\3\1\0\4\3"+
    "\2\0\103\3\2\0\3\3\40\0\20\3\20\0\125\3\14\0\u026c\3"+
    "\2\0\21\3\1\1\32\3\5\0\113\3\3\0\3\3\17\0\15\3"+
    "\1\0\4\3\3\3\13\0\22\3\3\3\13\0\22\3\2\3\14\0"+
    "\15\3\1\0\3\3\1\0\2\3\14\0\64\3\2\3\1\3\7\3"+
    "\10\3\1\3\2\3\13\3\3\0\1\3\4\0\1\3\1\3\2\0"+
    "\12\4\41\0\3\3\1\1\1\0\12\4\6\0\43\3\1\3\64\3"+
    "\10\0\51\3\1\3\1\3\5\0\106\3\12\0\35\3\3\0\3\3"+
    "\4\3\2\3\3\3\4\0\2\3\1\3\6\3\3\3\12\0\12\4"+
    "\36\3\2\0\5\3\13\0\54\3\4\0\21\3\7\3\2\3\6\0"+
    "\12\4\46\0\27\3\2\3\3\3\4\0\65\3\1\3\1\3\1\3"+
    "\7\3\1\0\1\3\1\3\1\3\2\3\10\3\6\3\12\3\2\0"+
    "\1\3\12\4\6\0\12\4\15\0\1\3\130\0\4\3\1\3\57\3"+
    "\1\3\1\3\5\3\1\3\1\3\5\3\1\3\2\3\7\3\4\0"+
    "\12\4\21\0\11\3\14\0\2\3\1\3\36\3\1\3\4\3\2\3"+
    "\2\3\1\3\1\3\2\3\2\3\12\4\54\3\1\3\1\3\2\3"+
    "\3\3\1\3\1\3\3\3\2\3\14\0\44\3\10\3\10\3\2\3"+
    "\2\3\10\0\12\4\3\0\3\3\12\4\36\3\6\3\122\0\3\3"+
    "\1\0\15\3\1\3\7\3\4\3\1\3\4\3\2\3\1\3\2\3"+
    "\11\0\54\3\77\3\15\3\1\3\42\3\45\3\47\3\25\0\4\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\11\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\11\3\10\3\6\3"+
    "\2\0\6\3\2\0\10\3\10\3\10\3\10\3\6\3\2\0\6\3"+
    "\2\0\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\10\3\10\3\16\3\2\0\10\3\10\3\10\3\10\3\10\3\10\3"+
    "\5\3\1\0\2\3\4\3\1\3\1\0\1\3\3\0\3\3\1\0"+
    "\2\3\4\3\1\3\3\0\4\3\2\0\2\3\4\3\4\0\10\3"+
    "\5\3\5\0\3\3\1\0\2\3\4\3\1\3\3\0\14\1\34\0"+
    "\2\1\5\0\1\1\17\0\2\3\23\0\1\3\12\0\1\1\21\0"+
    "\1\3\15\0\1\3\20\0\15\3\63\0\15\3\4\0\1\3\3\0"+
    "\14\3\21\0\1\3\4\0\1\3\2\0\1\3\3\3\2\3\3\3"+
    "\1\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\1\0\1\3\4\3\1\3\4\3\1\3\2\0"+
    "\2\3\2\3\5\0\1\3\4\3\4\0\1\3\21\0\43\3\1\3"+
    "\1\3\4\3\u0a77\0\57\3\1\0\57\3\1\0\1\3\1\3\3\3"+
    "\2\3\1\3\1\3\1\3\1\3\1\3\1\3\4\3\1\3\1\3"+
    "\2\3\1\3\6\3\2\3\3\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\2\3\6\0\1\3\1\3\1\3\1\3\3\3"+
    "\1\3\1\3\14\0\46\3\1\0\1\3\5\0\1\3\2\0\70\3"+
    "\7\0\1\3\17\0\1\3\27\3\11\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\40\3\57\0\1\3\u01d0\0\1\1\4\0\1\3\1\3"+
    "\1\3\31\0\11\3\4\3\2\3\1\0\5\3\2\0\3\3\1\3"+
    "\1\3\4\0\126\3\2\0\2\3\2\0\2\3\1\3\1\0\132\3"+
    "\1\0\3\3\1\3\5\0\51\3\3\0\136\3\21\0\33\3\65\0"+
    "\20\3\u0200\0\u19b6\3\112\0\u51cd\3\63\0\25\3\1\3\u0477\3\103\0"+
    "\50\3\6\3\2\0\u010c\3\1\3\3\0\20\3\12\4\2\3\24\0"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\4\0\12\3"+
    "\1\0\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\7\0\1\3\106\3\12\3"+
    "\2\3\45\0\11\3\2\0\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\3\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\10\3\1\3\1\3\1\3\1\3\2\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\2\0\1\3\1\3"+
    "\1\3\1\3\1\0\1\3\1\3\1\3\1\3\14\0\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\115\0"+
    "\2\3\1\3\7\3\1\3\3\3\1\3\4\3\1\3\27\3\2\3"+
    "\2\3\1\3\30\0\64\3\14\0\2\3\62\3\20\3\1\3\13\0"+
    "\12\4\6\0\22\3\6\3\3\0\1\3\4\0\12\4\34\3\10\3"+
    "\2\0\27\3\13\3\2\3\14\0\35\3\3\0\3\3\1\3\57\3"+
    "\1\3\2\3\4\3\2\3\1\3\4\3\16\0\1\3\12\4\46\0"+
    "\51\3\6\3\2\3\2\3\2\3\2\3\11\0\3\3\1\3\10\3"+
    "\1\3\1\3\2\0\12\4\6\0\20\3\1\3\6\3\3\0\1\3"+
    "\1\3\4\0\60\3\1\3\1\3\3\3\2\3\2\3\5\3\2\3"+
    "\1\3\1\3\1\3\30\0\2\3\1\3\2\0\13\3\1\3\2\3"+
    "\2\3\2\0\1\3\2\3\1\3\1\3\12\0\6\3\2\0\6\3"+
    "\2\0\6\3\11\0\7\3\1\0\7\3\221\0\43\3\2\3\1\3"+
    "\2\3\1\3\2\3\1\0\1\3\1\3\2\0\12\4\6\0\u2ba4\3"+
    "\14\0\27\3\4\0\61\3\u2104\0\u016e\3\2\0\152\3\46\0\7\3"+
    "\14\0\5\3\5\0\1\3\1\3\12\3\1\0\15\3\1\0\5\3"+
    "\1\0\1\3\1\0\2\3\1\0\2\3\1\0\154\3\41\0\u016b\3"+
    "\22\0\100\3\2\0\66\3\50\0\14\3\4\0\20\3\20\0\7\3"+
    "\14\0\2\3\30\0\3\3\40\0\5\3\1\0\207\3\23\0\12\4"+
    "\7\0\32\3\4\0\1\3\1\0\32\3\13\0\12\3\1\3\55\3"+
    "\2\3\37\3\3\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\1\4\3\2\4\3\3\1\5"+
    "\1\3\1\6\1\7\1\10\1\11\1\12\1\13\15\3"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\2\1"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\2\1\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\1\1\66\1\67\1\70"+
    "\1\71\1\70\1\72\1\70\3\71\2\73\1\71\1\73"+
    "\3\74\1\75\1\71\1\76\1\75\2\77\2\71\1\100"+
    "\1\101\1\71\1\102\1\103\1\5\1\1\1\103\25\104"+
    "\2\103\1\105\1\0\1\106\3\0\1\3\6\0\1\3"+
    "\1\107\1\110\1\111\1\112\3\3\1\0\1\4\1\113"+
    "\1\0\3\3\1\114\1\115\1\116\3\0\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\2\13\11\3\1\111"+
    "\12\3\1\126\1\3\1\127\1\112\1\130\5\3\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\2\0\1\137\1\140"+
    "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150"+
    "\1\110\1\151\1\152\1\106\1\153\1\154\1\155\1\156"+
    "\1\157\1\160\1\161\1\162\1\0\1\163\1\164\1\165"+
    "\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\175"+
    "\1\176\1\177\1\200\1\201\1\0\1\202\1\203\2\0"+
    "\5\204\1\73\1\74\1\0\1\76\3\0\1\13\1\0"+
    "\1\101\1\205\1\116\2\104\3\103\17\104\1\103\13\104"+
    "\2\103\4\104\1\0\3\206\5\3\1\4\1\0\1\4"+
    "\1\0\2\4\1\3\1\131\1\207\4\3\2\210\1\211"+
    "\4\3\4\0\1\212\1\213\1\214\1\3\1\215\13\3"+
    "\1\15\1\216\2\3\1\217\3\3\1\147\12\3\1\220"+
    "\1\221\1\222\1\223\1\224\1\225\1\226\1\227\1\230"+
    "\1\231\1\232\1\233\1\234\1\235\1\236\1\237\1\240"+
    "\1\0\3\204\1\241\1\76\2\0\1\242\1\101\33\104"+
    "\1\103\7\104\1\243\13\3\1\244\3\0\1\245\1\214"+
    "\1\13\1\3\1\246\1\3\1\22\12\3\1\247\2\3"+
    "\1\250\1\3\1\251\1\3\1\252\1\253\1\76\1\254"+
    "\1\101\23\104\4\3\1\255\1\3\1\256\1\257\1\3"+
    "\1\0\1\13\1\3\1\260\1\3\1\261\2\3\1\262"+
    "\1\263\6\3\1\264\1\76\1\254\7\104\1\262\4\104"+
    "\5\3\1\0\1\214\1\265\1\266\1\267\1\3\1\270"+
    "\3\3\1\271\1\3\1\254\10\104\4\3\1\272\1\214"+
    "\2\3\1\273\2\3\1\254\3\104\3\3\1\274\1\3"+
    "\1\275\1\3\1\275\1\3\1\276";

  private static int [] zzUnpackAction() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7"+
    "\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f"+
    "\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67"+
    "\0\u0db0\0\u0df9\0\u0e42\0\u0447\0\u0447\0\u0447\0\u0447\0\u0e8b"+
    "\0\u0ed4\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0f1d\0\u0f66"+
    "\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u0447\0\u111c\0\u1165"+
    "\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad"+
    "\0\u13f6\0\u143f\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u1488"+
    "\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1364\0\u1687"+
    "\0\u0447\0\u16d0\0\u1719\0\u1762\0\u0447\0\u17ab\0\u17f4\0\u0447"+
    "\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c"+
    "\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84"+
    "\0\u0447\0\u1ccd\0\u1d16\0\u0447\0\u1d5f\0\u0447\0\u1da8\0\u0447"+
    "\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0"+
    "\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238"+
    "\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u0db0\0\u0df9\0\u0447"+
    "\0\u04d9\0\u04d9\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b"+
    "\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u2711"+
    "\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2"+
    "\0\u29eb\0\u2a34\0\u2a7d\0\u0447\0\u0447\0\u2ac6\0\u2b0f\0\u2b58"+
    "\0\u2ba1\0\u0447\0\u0447\0\u0447\0\u2bea\0\u0447\0\u0447\0\u0447"+
    "\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u2e32"+
    "\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a"+
    "\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230\0\u2711\0\u3279"+
    "\0\u32c2\0\u330b\0\u2711\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478"+
    "\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u34c1\0\u350a\0\u3553"+
    "\0\u0447\0\u0447\0\u359c\0\u0447\0\u35e5\0\u0447\0\u362e\0\u0447"+
    "\0\u3677\0\u0447\0\u36c0\0\u0447\0\u0447\0\u0447\0\u3709\0\u3752"+
    "\0\u0447\0\u2ac6\0\u0447\0\u379b\0\u0447\0\u0447\0\u37e4\0\u0447"+
    "\0\u0447\0\u0447\0\u382d\0\u0447\0\u3876\0\u0447\0\u38bf\0\u0447"+
    "\0\u3908\0\u0447\0\u3951\0\u0447\0\u0447\0\u0447\0\u399a\0\u0447"+
    "\0\u0447\0\u39e3\0\u3a2c\0\u0447\0\u04d9\0\u3a75\0\u3abe\0\u3b07"+
    "\0\u3b50\0\u3b99\0\u1ace\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06"+
    "\0\u3d4f\0\u3d98\0\u0447\0\u0447\0\u3de1\0\u3e2a\0\u3e73\0\u3ebc"+
    "\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072\0\u40bb\0\u4104"+
    "\0\u414d\0\u4196\0\u41df\0\u4228\0\u4271\0\u42ba\0\u4303\0\u434c"+
    "\0\u4395\0\u43de\0\u4427\0\u4470\0\u44b9\0\u4502\0\u454b\0\u4594"+
    "\0\u45dd\0\u4626\0\u466f\0\u46b8\0\u4701\0\u474a\0\u4793\0\u47dc"+
    "\0\u4825\0\u486e\0\u48b7\0\u23ee\0\u0447\0\u48b7\0\u4900\0\u4949"+
    "\0\u4992\0\u49db\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff\0\u4b48\0\u4b91"+
    "\0\u4bda\0\u4c23\0\u2437\0\u0447\0\u4c6c\0\u4cb5\0\u4cfe\0\u4d47"+
    "\0\u0447\0\u28c7\0\u0447\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b\0\u4eb4"+
    "\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8\0\u0447\0\u5021\0\u506a\0\u2711"+
    "\0\u50b3\0\u50fc\0\u5145\0\u518e\0\u51d7\0\u5220\0\u5269\0\u52b2"+
    "\0\u52fb\0\u5344\0\u538d\0\u2711\0\u2711\0\u53d6\0\u541f\0\u2711"+
    "\0\u5468\0\u54b1\0\u54fa\0\u5543\0\u558c\0\u2711\0\u55d5\0\u561e"+
    "\0\u5667\0\u56b0\0\u56f9\0\u5742\0\u578b\0\u57d4\0\u0447\0\u0447"+
    "\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447"+
    "\0\u581d\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u5866"+
    "\0\u58af\0\u58f8\0\u5941\0\u598a\0\u59d3\0\u5a1c\0\u5a65\0\u5aae"+
    "\0\u5af7\0\u5b40\0\u5b89\0\u5bd2\0\u5c1b\0\u5c64\0\u5cad\0\u5cf6"+
    "\0\u5d3f\0\u5d88\0\u5dd1\0\u5e1a\0\u5e63\0\u5eac\0\u5ef5\0\u5f3e"+
    "\0\u5f87\0\u5fd0\0\u6019\0\u6062\0\u60ab\0\u60f4\0\u613d\0\u6186"+
    "\0\u61cf\0\u6218\0\u6261\0\u62aa\0\u62f3\0\u633c\0\u6385\0\u63ce"+
    "\0\u6417\0\u6460\0\u64a9\0\u64f2\0\u23ee\0\u653b\0\u6584\0\u65cd"+
    "\0\u6616\0\u665f\0\u66a8\0\u66f1\0\u673a\0\u6783\0\u67cc\0\u6815"+
    "\0\u2711\0\u685e\0\u68a7\0\u68f0\0\u0447\0\u6939\0\u6982\0\u69cb"+
    "\0\u2711\0\u6a14\0\u2711\0\u6a5d\0\u6aa6\0\u6aef\0\u6b38\0\u6b81"+
    "\0\u6bca\0\u6c13\0\u6c5c\0\u6ca5\0\u6cee\0\u2711\0\u6d37\0\u6d80"+
    "\0\u2711\0\u6dc9\0\u2711\0\u6e12\0\u0447\0\u5866\0\u6e5b\0\u6ea4"+
    "\0\u0447\0\u6eed\0\u6f36\0\u6f7f\0\u6fc8\0\u7011\0\u705a\0\u70a3"+
    "\0\u70ec\0\u7135\0\u717e\0\u71c7\0\u7210\0\u7259\0\u72a2\0\u72eb"+
    "\0\u7334\0\u737d\0\u73c6\0\u740f\0\u7458\0\u74a1\0\u74ea\0\u7533"+
    "\0\u2711\0\u757c\0\u2711\0\u2711\0\u75c5\0\u760e\0\u7657\0\u76a0"+
    "\0\u2711\0\u76e9\0\u2711\0\u7732\0\u777b\0\u05b4\0\u2711\0\u77c4"+
    "\0\u780d\0\u7856\0\u789f\0\u78e8\0\u7931\0\u2711\0\u0447\0\u797a"+
    "\0\u79c3\0\u7a0c\0\u7a55\0\u7a9e\0\u7ae7\0\u7b30\0\u7b79\0\u1e83"+
    "\0\u7bc2\0\u7c0b\0\u7c54\0\u7c9d\0\u7ce6\0\u7d2f\0\u7d78\0\u7dc1"+
    "\0\u7e0a\0\u7e53\0\u2c33\0\u2711\0\u2711\0\u2711\0\u7e9c\0\u2711"+
    "\0\u7ee5\0\u7f2e\0\u7f77\0\u2711\0\u7fc0\0\u8009\0\u8052\0\u809b"+
    "\0\u80e4\0\u812d\0\u8176\0\u81bf\0\u8208\0\u8251\0\u829a\0\u82e3"+
    "\0\u832c\0\u8375\0\u2711\0\u0447\0\u83be\0\u8407\0\u2711\0\u8450"+
    "\0\u8499\0\u0447\0\u84e2\0\u852b\0\u8574\0\u85bd\0\u8606\0\u864f"+
    "\0\u2711\0\u8698\0\u05b4\0\u86e1\0\u1e83\0\u872a\0\u2711";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\22\1\23\1\20\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\27\1\32\1\27\3\25\1\33"+
    "\1\34\1\35\1\36\1\37\1\21\1\40\1\41\1\42"+
    "\2\21\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\2\25\1\57\2\25"+
    "\1\60\2\25\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\25\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\27\1\21\1\20\1\107\1\110\11\20\1\111"+
    "\5\20\1\112\1\20\1\113\1\114\1\107\1\115\1\116"+
    "\1\117\2\107\10\20\1\120\14\20\1\121\1\122\1\123"+
    "\1\124\6\20\1\125\1\126\1\75\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\1\106\1\20\1\107"+
    "\1\20\1\107\1\110\11\20\1\111\5\20\1\112\1\20"+
    "\1\113\1\114\1\107\1\115\1\116\1\137\2\107\10\20"+
    "\1\120\14\20\1\121\1\122\1\123\1\124\7\20\1\126"+
    "\1\75\1\127\1\130\1\131\1\132\1\133\1\134\1\135"+
    "\1\136\1\106\1\20\1\107\72\140\1\141\16\140\2\142"+
    "\1\143\31\142\1\144\33\142\1\145\20\142\2\146\1\147"+
    "\66\146\1\145\17\146\1\150\1\21\12\150\1\151\11\150"+
    "\1\21\3\150\2\21\54\150\1\21\1\152\1\153\1\154"+
    "\23\152\1\21\3\152\2\21\34\152\1\155\17\152\1\21"+
    "\1\156\1\157\1\154\23\156\1\21\3\156\2\21\35\156"+
    "\1\160\16\156\1\21\2\161\1\162\57\161\1\163\1\164"+
    "\25\161\2\165\1\166\31\165\1\167\25\165\1\170\26\165"+
    "\22\150\1\171\3\150\1\171\3\150\2\171\4\150\1\172"+
    "\6\150\1\172\4\150\1\172\6\150\1\171\3\150\1\172"+
    "\55\150\1\173\51\150\1\174\2\150\3\20\1\175\1\20"+
    "\3\175\2\20\1\175\1\20\1\175\1\20\4\175\1\176"+
    "\1\175\1\20\1\177\1\0\6\20\23\175\2\200\5\20"+
    "\1\175\22\20\1\107\1\110\1\201\1\20\1\202\1\203"+
    "\1\204\1\27\1\30\1\205\1\27\1\206\1\27\3\203"+
    "\1\207\1\34\1\210\1\36\1\37\1\107\1\40\1\41"+
    "\1\42\2\107\1\43\1\211\1\212\1\213\1\214\1\215"+
    "\1\216\1\217\1\220\1\221\1\222\1\223\2\203\1\224"+
    "\2\203\1\225\2\203\1\226\1\227\1\63\1\230\1\65"+
    "\1\66\1\67\1\203\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\27\1\107\112\0\1\21\24\0\1\21"+
    "\3\0\2\21\54\0\1\21\1\0\1\231\24\0\1\232"+
    "\3\0\2\231\54\0\1\231\3\0\17\23\1\0\1\23"+
    "\1\0\1\233\7\0\23\23\7\0\1\23\17\0\1\23"+
    "\4\0\17\24\1\0\1\24\11\0\23\24\7\0\1\24"+
    "\17\0\1\24\4\0\2\23\15\25\1\0\1\25\1\0"+
    "\1\234\4\0\1\235\2\0\23\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\2\25\1\236\12\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\23\25\7\0\1\25"+
    "\17\0\1\25\11\0\2\27\1\0\1\27\1\0\1\27"+
    "\4\0\1\237\1\240\1\0\1\241\4\0\1\235\54\0"+
    "\1\27\11\0\2\27\1\242\1\27\1\243\1\27\2\244"+
    "\2\0\1\237\1\240\1\0\1\241\4\0\1\235\54\0"+
    "\1\27\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\1\25\1\245\1\25\1\246\17\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\1\25\1\247"+
    "\3\25\1\250\1\251\14\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\7\25\1\252\5\25\1\0\1\25\1\0"+
    "\1\234\4\0\1\235\2\0\7\25\1\253\1\254\12\25"+
    "\7\0\1\25\17\0\1\25\4\0\1\255\1\0\3\255"+
    "\2\256\1\255\1\256\1\255\1\256\4\255\1\257\1\255"+
    "\11\0\23\255\2\260\5\0\1\255\17\0\1\256\4\0"+
    "\2\23\11\25\1\261\3\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\5\25\1\262\2\25\1\263\12\25"+
    "\7\0\1\25\17\0\1\25\25\0\1\264\4\0\1\265"+
    "\104\0\1\266\73\0\1\267\1\270\1\0\1\267\1\0"+
    "\1\267\4\0\1\271\4\0\1\272\1\273\1\274\55\0"+
    "\1\267\31\0\1\275\1\276\107\0\1\277\1\300\57\0"+
    "\26\301\1\0\4\301\1\0\1\302\54\301\3\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\1\25\1\303\1\25\1\304\10\25\1\305\6\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\306"+
    "\1\0\1\234\4\0\1\235\2\0\23\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\15\25\1\0\1\25\1\0"+
    "\1\234\4\0\1\235\2\0\5\25\1\307\15\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\310"+
    "\1\0\1\234\4\0\1\235\2\0\12\25\1\311\10\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\2\25\1\312"+
    "\12\25\1\313\5\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\7\25\1\314\5\25\1\0\1\315\1\0\1\234"+
    "\4\0\1\235\2\0\2\25\1\316\4\25\1\317\13\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\7\25\1\320"+
    "\5\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\2\25\1\321\4\25\1\322\2\25\1\323\10\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\5\25\1\324\15\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\7\25\1\325"+
    "\5\25\1\0\1\326\1\0\1\234\4\0\1\235\2\0"+
    "\23\25\7\0\1\25\17\0\1\25\4\0\2\23\7\25"+
    "\1\327\5\25\1\0\1\330\1\0\1\234\4\0\1\235"+
    "\2\0\23\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\4\25\1\331\1\332\1\333\10\25\1\334\3\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\12\25\1\335\1\25"+
    "\1\336\6\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\7\25\1\337\5\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\7\25\1\340\13\25\7\0\1\25\17\0"+
    "\1\25\26\0\1\341\110\0\1\341\3\0\1\342\57\0"+
    "\30\343\1\344\1\345\1\0\27\343\1\346\26\343\70\0"+
    "\1\347\111\0\1\350\50\0\1\351\30\0\1\352\14\0"+
    "\1\353\42\0\1\354\46\0\1\355\41\0\1\356\47\0"+
    "\1\357\40\0\1\360\50\0\1\361\37\0\1\362\51\0"+
    "\1\363\36\0\1\364\110\0\1\365\60\0\1\107\24\0"+
    "\1\107\3\0\2\107\54\0\1\107\26\0\1\366\120\0"+
    "\1\367\55\0\1\255\1\0\3\255\2\0\1\255\1\0"+
    "\1\255\1\0\4\255\1\370\1\255\11\0\23\255\2\260"+
    "\5\0\1\255\45\0\1\264\4\0\1\371\104\0\1\372"+
    "\112\0\1\272\1\0\1\373\107\0\1\374\1\375\110\0"+
    "\1\376\121\0\1\377\77\0\1\u0100\107\0\1\u0101\1\u0102"+
    "\30\0\1\u0103\57\0\1\u0104\45\0\1\u0105\42\0\1\u0106"+
    "\46\0\1\u0107\41\0\1\u0108\47\0\1\u0109\40\0\1\u010a"+
    "\50\0\1\u010b\37\0\1\u010c\51\0\1\367\36\0\1\u010d"+
    "\110\0\1\u010e\57\0\72\140\1\0\16\140\2\142\1\u010f"+
    "\31\142\1\0\33\142\1\0\46\142\1\u0110\62\142\65\0"+
    "\1\u0111\23\0\2\146\1\u0112\66\146\1\0\45\146\1\u0110"+
    "\62\146\52\0\1\u0113\36\0\2\152\1\0\23\152\1\0"+
    "\3\152\2\0\54\152\1\0\1\152\1\153\1\0\23\152"+
    "\1\21\3\152\2\21\54\152\1\21\1\u0114\1\u0115\7\u0114"+
    "\1\u0116\1\u0114\1\u0116\1\u0114\1\u0116\1\u0117\7\u0114\1\232"+
    "\3\u0114\1\u0115\1\231\3\u0114\1\u0118\47\u0114\1\u0116\1\u0115"+
    "\2\152\1\0\23\152\1\0\3\152\2\0\34\152\1\u0119"+
    "\17\152\1\0\2\156\1\0\23\156\1\0\3\156\2\0"+
    "\54\156\1\0\1\156\1\157\1\0\23\156\1\21\3\156"+
    "\2\21\54\156\1\21\2\156\1\0\23\156\1\0\3\156"+
    "\2\0\35\156\1\u011a\16\156\1\0\2\161\1\u011b\57\161"+
    "\1\0\1\164\53\161\1\0\62\161\40\0\1\u011c\6\0"+
    "\1\u011c\4\0\1\u011c\12\0\1\u011c\21\0\2\164\1\u011d"+
    "\57\164\1\u011e\1\164\1\161\24\164\2\165\1\166\31\165"+
    "\1\0\25\165\1\u011f\30\165\1\166\57\165\1\u011f\26\165"+
    "\65\u0120\1\u0111\23\u0120\62\165\1\u0121\26\165\40\0\1\u0122"+
    "\6\0\1\u0122\4\0\1\u0122\12\0\1\u0122\106\0\1\u0123"+
    "\26\0\17\175\1\0\1\175\11\0\23\175\7\0\1\175"+
    "\17\0\1\175\26\0\1\u0124\66\0\17\201\1\0\1\201"+
    "\1\0\1\233\7\0\23\201\7\0\1\201\17\0\1\201"+
    "\4\0\17\202\1\0\1\202\11\0\23\202\7\0\1\202"+
    "\17\0\1\202\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\23\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\2\203\1\u0125\12\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\23\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\1\203\1\u0126\1\203\1\u0127"+
    "\17\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\1\203"+
    "\1\u0128\3\203\1\u0127\1\u0129\14\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\7\203\1\u012a\5\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\7\203\1\u012b\1\u012c"+
    "\12\203\7\0\1\203\17\0\1\203\4\0\2\201\11\203"+
    "\1\u012d\3\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\5\203\1\u012e\2\203\1\u012f\12\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\1\203\1\u0130\1\203\1\u0131"+
    "\10\203\1\u0132\6\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\u0133\1\0\1\234\4\0\1\235"+
    "\2\0\23\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\203\1\0\1\234\4\0\1\235\2\0"+
    "\5\203\1\u0134\15\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\u0135\1\0\1\234\4\0\1\235"+
    "\2\0\12\203\1\u0136\10\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\2\203\1\u0137\12\203\1\u0138\5\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\7\203\1\u0139\5\203"+
    "\1\0\1\u013a\1\0\1\234\4\0\1\235\2\0\2\203"+
    "\1\u013b\4\203\1\u013c\13\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\7\203\1\u013d\5\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\2\203\1\u013e\4\203\1\u013f"+
    "\2\203\1\u0140\10\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\5\203\1\u0141\15\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\7\203\1\u0142\5\203\1\0\1\u0143\1\0"+
    "\1\234\4\0\1\235\2\0\23\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\7\203\1\u0127\5\203\1\0\1\u0144"+
    "\1\0\1\234\4\0\1\235\2\0\23\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\4\203\1\u0145\1\u0146\1\u0127"+
    "\10\203\1\u0147\3\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\12\203\1\u0148\1\203\1\u0149\6\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\7\203\1\u014a\5\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\7\203\1\u013d"+
    "\13\203\7\0\1\203\17\0\1\203\1\0\26\233\1\0"+
    "\1\u014b\1\233\1\u014b\1\233\1\0\55\233\25\u014c\1\233"+
    "\1\u014d\1\u014e\1\u014c\1\u014e\1\u014c\1\u014d\55\u014c\25\0"+
    "\1\241\4\0\1\235\61\0\2\23\5\25\1\u014f\7\25"+
    "\1\0\1\u0150\1\0\1\234\4\0\1\235\2\0\4\25"+
    "\1\u0151\5\25\1\u0152\1\25\1\u0153\6\25\7\0\1\25"+
    "\17\0\1\25\11\0\2\256\1\0\1\256\1\0\1\256"+
    "\71\0\1\256\11\0\2\u0154\1\0\1\u0154\1\0\1\u0154"+
    "\6\0\1\u0155\2\0\1\u0155\57\0\1\u0154\1\0\25\u014d"+
    "\1\0\63\u014d\11\0\1\u0156\1\0\1\u0156\105\0\1\u0157"+
    "\1\u0158\1\u0157\1\u0158\1\0\1\u0158\2\0\2\u0157\1\0"+
    "\1\u0157\17\0\2\u0157\1\0\1\u0157\40\0\1\u0157\11\0"+
    "\4\u0159\1\0\1\u0159\2\0\2\u0159\1\0\1\u0159\17\0"+
    "\2\u0159\1\0\1\u0159\40\0\1\u0159\4\0\2\23\15\25"+
    "\1\0\1\u015a\1\0\1\234\4\0\1\235\2\0\23\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\u015b\4\0\1\235\2\0\23\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\u015b\3\0\1\u015c\1\235\2\0\23\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\u015b\4\0\1\235\2\0\6\25\1\250\14\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\5\25\1\u015d"+
    "\15\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\1\u015e"+
    "\3\25\1\u015f\16\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\7\25\1\u0160\13\25\7\0\1\25\17\0\1\25"+
    "\1\0\3\u0161\3\u0162\14\255\1\u0161\1\255\11\u0161\23\255"+
    "\7\u0161\1\255\17\u0161\1\255\1\u0161\10\0\2\256\1\0"+
    "\1\256\1\0\1\256\5\0\1\240\1\0\1\241\4\0"+
    "\1\235\54\0\1\256\23\0\1\u0163\66\0\6\u0161\14\0"+
    "\1\u0161\1\0\11\u0161\23\0\7\u0161\1\0\17\u0161\1\0"+
    "\1\u0161\3\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\1\u0164\12\25\1\u0165\7\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\2\25\1\u0166\20\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\4\25\1\u0167"+
    "\16\25\7\0\1\25\17\0\1\25\4\0\1\255\1\0"+
    "\3\255\2\0\1\255\1\0\1\255\1\0\4\255\1\0"+
    "\1\255\11\0\23\255\2\260\5\0\1\255\31\0\2\267"+
    "\1\0\1\267\1\0\1\267\4\0\1\271\1\u0168\1\0"+
    "\1\241\4\0\1\235\54\0\1\267\11\0\2\267\1\u0169"+
    "\1\267\1\u016a\1\267\2\u016a\2\0\1\271\1\u0168\1\0"+
    "\1\241\4\0\1\235\54\0\1\267\11\0\2\u016b\1\0"+
    "\1\u016b\1\0\1\u016b\71\0\1\u016b\31\0\1\u016c\1\u016d"+
    "\57\0\26\301\1\0\4\301\1\0\103\301\1\0\4\301"+
    "\1\0\1\u016e\54\301\3\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\2\25\1\u016f\1\u0170"+
    "\17\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\13\25"+
    "\1\u0171\7\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\u0172\1\0\1\234\4\0\1\235\2\0"+
    "\1\25\1\u0173\10\25\1\u0174\10\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\1\u0175\22\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\1\u0176\7\25\1\u0177\1\u0178\11\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\4\25\1\250"+
    "\16\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\u0179\1\0\1\234\4\0\1\235\2\0\23\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\13\25\1\u017a"+
    "\7\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\12\25"+
    "\1\u017b\10\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\u015b\4\0\1\235\2\0"+
    "\1\u017c\22\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\15\25\1\u017d\5\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\10\25\1\u017e\12\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\15\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\1\u017f\22\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\15\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\1\25\1\u0180\21\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\5\25\1\u0181\15\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\15\25\1\0\1\25\1\0"+
    "\1\234\4\0\1\235\2\0\10\25\1\u0182\12\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\5\25\1\u0183\15\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\11\25\1\u0184"+
    "\11\25\7\0\1\25\17\0\1\25\4\0\2\23\7\25"+
    "\1\u0185\5\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\23\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\1\u0186\22\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\5\25\1\u0187\7\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\10\25\1\u0188\12\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\u015b"+
    "\4\0\1\235\2\0\5\25\1\u0189\15\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\15\25\1\0\1\25\1\0"+
    "\1\u015b\4\0\1\235\2\0\4\25\1\u018a\16\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\13\25\1\u0165\7\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\1\u018b\22\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\u018c\1\0\1\234\4\0\1\235\2\0\12\25\1\u018d"+
    "\10\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\12\25"+
    "\1\u018e\10\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\1\25\1\u0186\21\25\7\0\1\25\17\0\1\25\32\0"+
    "\1\u018f\30\0\1\u0190\116\0\1\u0191\111\0\1\u0192\50\0"+
    "\1\u0193\110\0\1\u0194\110\0\1\u0195\110\0\1\u0196\110\0"+
    "\1\u015c\110\0\1\u0197\101\0\1\u0198\116\0\1\u0199\1\u019a"+
    "\125\0\1\u010b\73\0\1\u019b\110\0\1\u019c\110\0\1\u019d"+
    "\110\0\1\u019e\110\0\1\u019f\57\0\26\142\1\0\62\142"+
    "\26\146\1\0\62\146\42\0\1\u01a0\57\0\1\u01a1\1\0"+
    "\1\u01a1\1\0\1\u01a1\71\0\1\u01a1\11\0\4\u01a2\1\0"+
    "\1\u01a2\2\0\2\u01a2\1\0\1\u01a2\17\0\2\u01a2\1\0"+
    "\1\u01a2\40\0\1\u01a2\11\0\4\u01a3\1\0\1\u01a3\2\0"+
    "\2\u01a3\1\0\1\u01a3\17\0\2\u01a3\1\0\1\u01a3\40\0"+
    "\1\u01a3\1\0\2\152\1\0\23\152\1\0\3\152\2\0"+
    "\34\152\1\u01a4\17\152\1\0\2\156\1\0\23\156\1\0"+
    "\3\156\2\0\35\156\1\u01a4\16\156\41\0\1\u01a5\6\0"+
    "\1\u01a5\4\0\1\u01a5\12\0\1\u01a5\21\0\26\164\1\0"+
    "\62\164\2\u011e\1\u01a6\61\u011e\1\161\24\u011e\62\165\1\u01a7"+
    "\26\165\26\u0120\1\0\62\u0120\62\165\1\u01a8\26\165\40\0"+
    "\1\u01a9\6\0\1\u01a9\4\0\1\u01a9\12\0\1\u01a9\24\0"+
    "\2\201\5\203\1\u01aa\7\203\1\0\1\u01ab\1\0\1\234"+
    "\4\0\1\235\2\0\4\203\1\u01ac\5\203\1\u01ad\1\203"+
    "\1\u01ae\6\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\u01af\1\0\1\234\4\0\1\235\2\0"+
    "\23\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\u015b\4\0\1\235\2\0\23\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\u015b\3\0\1\u015c\1\235\2\0\23\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\u015b\4\0\1\235\2\0\6\203\1\u0127"+
    "\14\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\5\203"+
    "\1\u01b0\15\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\203\1\0\1\234\4\0\1\235\2\0"+
    "\1\u01b1\3\203\1\u01b2\16\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\7\203\1\u01b3\13\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\15\203\1\0\1\203\1\0\1\234"+
    "\4\0\1\235\2\0\1\u01b4\12\203\1\u01b5\7\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\2\203\1\u01b6\20\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\4\203\1\u01b2"+
    "\16\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\2\203"+
    "\1\u01b2\1\u0127\17\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\13\203\1\u01b7\7\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\u01b8\1\0\1\234\4\0"+
    "\1\235\2\0\1\203\1\u01b9\10\203\1\u0135\10\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\1\u01ba\22\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\1\u01bb\7\203\1\u01bc"+
    "\1\u01bd\11\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\203\1\0\1\234\4\0\1\235\2\0"+
    "\4\203\1\u0127\16\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\u01be\1\0\1\234\4\0\1\235"+
    "\2\0\23\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\203\1\0\1\234\4\0\1\235\2\0"+
    "\13\203\1\u01bf\7\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\12\203\1\u01c0\10\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\u015b\4\0"+
    "\1\235\2\0\1\u0127\22\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\15\203\1\u0127\5\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\15\203\1\0\1\203\1\0\1\234"+
    "\4\0\1\235\2\0\10\203\1\u01c1\12\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\1\u01c2\22\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\1\203\1\u0127\21\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\5\203\1\u01c3\15\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\10\203\1\u012f"+
    "\12\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\5\203"+
    "\1\u01c4\15\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\203\1\0\1\234\4\0\1\235\2\0"+
    "\11\203\1\u01c5\11\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\7\203\1\u01c6\5\203\1\0\1\203\1\0\1\234"+
    "\4\0\1\235\2\0\23\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\1\u0127\22\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\5\203\1\u01c7\7\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\10\203\1\u01c8\12\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\u015b\4\0\1\235\2\0\5\203\1\u0143\15\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\u015b\4\0\1\235\2\0\4\203\1\u01c9"+
    "\16\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\13\203"+
    "\1\u01b5\7\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\203\1\0\1\234\4\0\1\235\2\0"+
    "\1\u01ca\22\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\u01b8\1\0\1\234\4\0\1\235\2\0"+
    "\12\203\1\u01cb\10\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\12\203\1\u01cc\10\203\7\0\1\203\17\0\1\203"+
    "\1\0\26\233\1\0\1\u014b\1\u01cd\1\u014b\1\233\1\0"+
    "\55\233\3\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\12\25\1\u01ce\10\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\11\25\1\u01cf\3\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\23\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\10\25\1\u01d0\12\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\5\25\1\u01d1"+
    "\15\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\7\25"+
    "\1\u01d2\13\25\7\0\1\25\17\0\1\25\11\0\2\u0154"+
    "\1\0\1\u0154\1\0\1\u0154\7\0\1\241\4\0\1\235"+
    "\54\0\1\u0154\11\0\2\u0154\1\0\1\u0154\1\0\1\u0154"+
    "\71\0\1\u0154\12\0\1\u0156\1\0\1\u0156\11\0\1\241"+
    "\4\0\1\235\66\0\4\u0157\1\0\1\u0157\2\0\2\u0157"+
    "\1\0\1\u0157\1\0\1\241\4\0\1\235\10\0\2\u0157"+
    "\1\0\1\u0157\40\0\1\u0157\11\0\1\u0157\1\u0158\1\u0157"+
    "\1\u0158\1\0\1\u0158\2\0\2\u0157\1\0\1\u0157\1\0"+
    "\1\241\4\0\1\235\10\0\2\u0157\1\0\1\u0157\40\0"+
    "\1\u0157\11\0\4\u0159\1\0\1\u0159\2\0\2\u0159\1\0"+
    "\1\u0159\1\0\1\241\4\0\1\235\10\0\2\u0159\1\0"+
    "\1\u0159\40\0\1\u0159\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\7\25\1\u01d3\13\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\1\u01d4\3\25"+
    "\1\326\16\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\14\25\1\u01d5\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\23\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\u0186\1\0\1\234\4\0\1\235\2\0"+
    "\23\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\4\25"+
    "\1\u01d6\16\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\u01d7\1\0\1\234\4\0\1\235\2\0"+
    "\23\25\7\0\1\25\17\0\1\25\4\0\2\23\7\25"+
    "\1\u01d8\5\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\23\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\17\25\1\u0186\3\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\u01d9\1\0\1\234\4\0\1\235"+
    "\2\0\23\25\7\0\1\25\17\0\1\25\11\0\2\u01da"+
    "\1\0\1\u01da\1\0\1\u01da\6\0\1\u01db\2\0\1\u01db"+
    "\57\0\1\u01da\12\0\1\u01dc\1\0\1\u01dc\105\0\4\u0157"+
    "\1\0\1\u0157\2\0\2\u0157\1\0\1\u0157\17\0\2\u0157"+
    "\1\0\1\u0157\40\0\1\u0157\11\0\2\u016b\1\0\1\u016b"+
    "\1\0\1\u016b\5\0\1\u0168\1\0\1\241\4\0\1\235"+
    "\54\0\1\u016b\32\0\1\u01dd\57\0\34\u01de\1\u01df\54\u01de"+
    "\3\0\2\23\15\25\1\0\1\250\1\0\1\234\4\0"+
    "\1\235\2\0\23\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\u01e0\1\0\1\234\4\0\1\235"+
    "\2\0\23\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\5\25\1\u01e1\15\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\7\25\1\u01e2\5\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\23\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\15\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\4\25\1\u01e3\16\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\2\25\1\u01e4\20\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\15\25\1\0\1\25\1\0"+
    "\1\234\4\0\1\235\2\0\12\25\1\u01e5\10\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\u01e6"+
    "\1\0\1\234\4\0\1\235\2\0\23\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\15\25\1\0\1\u01e7\1\0"+
    "\1\234\4\0\1\235\2\0\23\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\10\25\1\u01e8\12\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\15\25\1\0\1\u01e9\1\0"+
    "\1\234\4\0\1\235\2\0\23\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\1\u01ea\22\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\10\25\1\250\12\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\15\25\1\0\1\25\1\0"+
    "\1\234\4\0\1\235\2\0\12\25\1\u01eb\10\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\14\25\1\u01ec\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\23\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\4\25\1\u016f\16\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\7\25\1\u01ed"+
    "\13\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\u015b\3\0\1\u0196\1\235\2\0"+
    "\23\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\13\25"+
    "\1\u01ee\7\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\2\25\1\u01ef\20\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\u01f0\1\0\1\234\4\0\1\235"+
    "\2\0\23\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\1\u01f1\22\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\1\u01f2\22\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\14\25\1\u0186\6\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\5\25\1\u01f3\15\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\15\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\10\25\1\u01f4\12\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\11\25\1\u0186\11\25\7\0\1\25"+
    "\17\0\1\25\32\0\1\u01f5\60\0\1\u01f6\24\0\1\u01f6"+
    "\3\0\2\u01f6\54\0\1\u01f6\11\0\1\u0114\1\0\1\u0114"+
    "\1\0\1\u0114\71\0\1\u0114\11\0\4\u0114\1\0\1\u0114"+
    "\2\0\2\u0114\1\0\1\u0114\17\0\2\u0114\1\0\1\u0114"+
    "\40\0\1\u0114\11\0\4\u0117\1\0\1\u0117\2\0\2\u0117"+
    "\1\0\1\u0117\17\0\2\u0117\1\0\1\u0117\40\0\1\u0117"+
    "\1\0\26\u01a4\1\0\4\u01a4\1\0\55\u01a4\40\0\1\u01f7"+
    "\6\0\1\u01f7\4\0\1\u01f7\12\0\1\u01f7\21\0\26\u011e"+
    "\1\0\62\u011e\62\165\1\0\26\165\40\0\1\u01f8\6\0"+
    "\1\u01f8\4\0\1\u01f8\12\0\1\u01f8\61\0\1\u01f9\6\0"+
    "\1\u01f9\4\0\1\u01f9\12\0\1\u01f9\24\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\12\203"+
    "\1\u01fa\10\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\11\203\1\u01fb\3\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\23\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\10\203\1\u01fc\12\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\5\203\1\u01fd\15\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\15\203\1\0\1\203\1\0\1\234"+
    "\4\0\1\235\2\0\7\203\1\u01fe\13\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\7\203\1\u01ff\13\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\1\u0200\3\203\1\u0143"+
    "\16\203\7\0\1\203\17\0\1\203\4\0\2\201\14\203"+
    "\1\u01ca\1\0\1\203\1\0\1\234\4\0\1\235\2\0"+
    "\23\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\u0127\1\0\1\234\4\0\1\235\2\0\23\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\4\203\1\u0135"+
    "\16\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\u0201\1\0\1\234\4\0\1\235\2\0\23\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\7\203\1\u0202"+
    "\5\203\1\0\1\203\1\0\1\234\4\0\1\235\2\0"+
    "\23\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\17\203"+
    "\1\u0127\3\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\u0203\1\0\1\234\4\0\1\235\2\0"+
    "\23\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\5\203"+
    "\1\u0127\15\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\7\203\1\u013a\5\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\23\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\2\203\1\u0204\20\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\12\203\1\u01c1\10\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\15\203\1\0\1\u01b3\1\0\1\234"+
    "\4\0\1\235\2\0\23\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\u0205\1\0\1\234\4\0"+
    "\1\235\2\0\23\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\10\203\1\u0206\12\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\u013d\1\0\1\234\4\0"+
    "\1\235\2\0\23\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\1\u01b1\22\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\10\203\1\u0127\12\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\12\203\1\u0207\10\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\14\203\1\u0208\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\23\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\15\203\1\0\1\203\1\0\1\234"+
    "\4\0\1\235\2\0\7\203\1\u0209\13\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\u015b\3\0\1\u0196\1\235\2\0\23\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\13\203\1\u0127\7\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\2\203\1\u020a\20\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\u020b\1\0\1\234\4\0\1\235\2\0\23\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\1\u020c\22\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\14\203\1\u0127\6\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\10\203\1\u01b2"+
    "\12\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\11\203"+
    "\1\u0127\11\203\7\0\1\203\17\0\1\203\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\5\25\1\u018e\15\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\1\u020d\22\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\12\25\1\u020e\10\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\15\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\11\25\1\u020f\11\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\4\25\1\u0210\16\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\15\25\1\0\1\25\1\0"+
    "\1\234\4\0\1\235\2\0\16\25\1\u0211\4\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\12\25\1\u0212\10\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\14\25\1\u0213"+
    "\6\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\4\25"+
    "\1\u0214\16\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\5\25\1\u0215\15\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\1\25\1\326\21\25\7\0\1\25\17\0\1\25"+
    "\11\0\2\u01da\1\0\1\u01da\1\0\1\u01da\7\0\1\241"+
    "\4\0\1\235\54\0\1\u01da\11\0\2\u01da\1\0\1\u01da"+
    "\1\0\1\u01da\71\0\1\u01da\12\0\1\u01dc\1\0\1\u01dc"+
    "\11\0\1\241\4\0\1\235\56\0\34\u01de\1\u0216\54\u01de"+
    "\26\301\1\0\4\301\1\0\1\u0217\54\301\3\0\2\23"+
    "\7\25\1\u0218\5\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\23\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\15\25\1\u0219\5\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\15\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\1\25\1\u021a\21\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\10\25\1\u021b\12\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\15\25\1\0\1\25\1\0"+
    "\1\234\4\0\1\235\2\0\4\25\1\u021c\16\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\6\25\1\u021d\14\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\11\25\1\u021e"+
    "\11\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\1\25"+
    "\1\u021f\21\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\14\25\1\u0220\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\23\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\20\25\1\u015f\2\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\1\u0221\22\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\10\25\1\u0222\12\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\15\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\23\25\7\0\1\u0223\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\1\u0224\22\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\7\25\1\u0225\13\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\15\25\1\0\1\u0226\1\0\1\234\4\0"+
    "\1\235\2\0\23\25\7\0\1\25\17\0\1\25\41\0"+
    "\1\u0227\6\0\1\u0227\4\0\1\u0227\12\0\1\u0227\61\0"+
    "\1\u0228\6\0\1\u0228\4\0\1\u0228\12\0\1\u0228\24\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\5\203\1\u01cc\15\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\1\u01b4\22\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\12\203\1\u0229\10\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\15\203\1\0\1\203\1\0\1\234"+
    "\4\0\1\235\2\0\11\203\1\u022a\11\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\4\203\1\u022b\16\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\16\203\1\u0127\4\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\12\203\1\u022c"+
    "\10\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\5\203"+
    "\1\u022d\15\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\203\1\0\1\234\4\0\1\235\2\0"+
    "\1\203\1\u0143\21\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\7\203\1\u022e\5\203\1\0\1\203\1\0\1\234"+
    "\4\0\1\235\2\0\23\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\1\203\1\u01b8\21\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\15\203\1\0\1\203\1\0\1\234"+
    "\4\0\1\235\2\0\6\203\1\u022f\14\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\11\203\1\u0230\11\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\20\203\1\u01b2\2\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\1\u0231\22\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\10\203\1\u0232"+
    "\12\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\23\203"+
    "\7\0\1\u0233\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\1\u01b2\22\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\7\203\1\u0234"+
    "\13\203\7\0\1\203\17\0\1\203\4\0\2\23\15\25"+
    "\1\0\1\u0235\1\0\1\234\4\0\1\235\2\0\23\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\14\25\1\u015f"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\23\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\u0236\1\0\1\234\4\0\1\235\2\0\23\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\21\25\1\u0237\1\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\5\25\1\u0238"+
    "\15\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\11\25"+
    "\1\u0239\11\25\7\0\1\25\17\0\1\25\1\0\34\u01de"+
    "\1\u023a\54\u01de\26\301\1\0\4\301\1\0\1\u023b\54\301"+
    "\3\0\2\23\15\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\6\25\1\u023c\14\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\15\25\1\0\1\25\1\0\1\234"+
    "\4\0\1\235\2\0\5\25\1\u023d\15\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\15\25\1\0\1\25\1\0"+
    "\1\234\4\0\1\235\2\0\4\25\1\u023e\16\25\7\0"+
    "\1\25\17\0\1\25\4\0\2\23\15\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\12\25\1\u023f\10\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\14\25\1\u0240"+
    "\6\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\12\25"+
    "\1\u0241\10\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\10\25\1\u0242\12\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\23\25\7\0\1\u0243\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\u0244\1\0\1\234\4\0\1\235\2\0"+
    "\23\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\5\25"+
    "\1\u0245\15\25\7\0\1\25\17\0\1\25\41\0\1\u0246"+
    "\6\0\1\u0246\4\0\1\u0246\12\0\1\u0246\24\0\2\201"+
    "\14\203\1\u01b2\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\23\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\u0247\1\0\1\234\4\0\1\235\2\0"+
    "\23\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\21\203"+
    "\1\u0248\1\203\7\0\1\203\17\0\1\203\4\0\2\201"+
    "\15\203\1\0\1\203\1\0\1\234\4\0\1\235\2\0"+
    "\5\203\1\u0249\15\203\7\0\1\203\17\0\1\203\4\0"+
    "\2\201\15\203\1\0\1\203\1\0\1\234\4\0\1\235"+
    "\2\0\11\203\1\u0135\11\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\6\203\1\u0127\14\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\15\203\1\0\1\203\1\0\1\234"+
    "\4\0\1\235\2\0\12\203\1\u024a\10\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\12\203\1\u024b\10\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\10\203\1\u024c\12\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\23\203\7\0"+
    "\1\u024d\17\0\1\203\4\0\2\201\15\203\1\0\1\203"+
    "\1\0\1\234\4\0\1\235\2\0\5\203\1\u024e\15\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\5\25\1\u024f"+
    "\15\25\7\0\1\25\17\0\1\25\4\0\2\23\11\25"+
    "\1\u0250\3\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\23\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\1\25\1\u0251\21\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\2\25\1\u0252\20\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\15\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\4\25\1\u0253\16\25\7\0\1\25\17\0"+
    "\1\25\1\0\34\u01de\1\u0254\54\u01de\3\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\5\25"+
    "\1\u0255\15\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\7\25\1\u0256\5\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\23\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\3\25\1\u0257\17\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\15\25\1\0\1\u0258\1\0\1\234\4\0"+
    "\1\235\2\0\23\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\14\25\1\u0259\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\23\25\7\0\1\25\17\0\1\25\41\0"+
    "\1\u025a\6\0\1\u025a\4\0\1\u025a\12\0\1\u025a\24\0"+
    "\2\201\11\203\1\u025b\3\203\1\0\1\203\1\0\1\234"+
    "\4\0\1\235\2\0\23\203\7\0\1\203\17\0\1\203"+
    "\4\0\2\201\15\203\1\0\1\203\1\0\1\234\4\0"+
    "\1\235\2\0\1\203\1\u0142\21\203\7\0\1\203\17\0"+
    "\1\203\4\0\2\201\15\203\1\0\1\203\1\0\1\234"+
    "\4\0\1\235\2\0\2\203\1\u01b2\20\203\7\0\1\203"+
    "\17\0\1\203\4\0\2\201\15\203\1\0\1\203\1\0"+
    "\1\234\4\0\1\235\2\0\5\203\1\u025c\15\203\7\0"+
    "\1\203\17\0\1\203\4\0\2\201\7\203\1\u01b8\5\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\23\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\3\203\1\u0127"+
    "\17\203\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\u025d\1\0\1\234\4\0\1\235\2\0\23\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\14\203\1\u01b7"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\23\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\11\25\1\u025e"+
    "\11\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\22\25"+
    "\1\u025f\7\0\1\25\17\0\1\25\4\0\2\23\7\25"+
    "\1\u0260\5\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\23\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\u0261\1\0\1\234\4\0\1\235\2\0"+
    "\23\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\u0262\1\0\1\234\4\0\1\235\2\0\23\25"+
    "\7\0\1\25\17\0\1\25\4\0\2\23\15\25\1\0"+
    "\1\25\1\0\1\234\4\0\1\235\2\0\5\25\1\u0186"+
    "\15\25\7\0\1\25\17\0\1\25\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\1\25"+
    "\1\u0263\21\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\u0264\1\0\1\234\4\0\1\235\2\0"+
    "\23\25\7\0\1\25\17\0\1\25\4\0\2\201\15\203"+
    "\1\0\1\203\1\0\1\234\4\0\1\235\2\0\22\203"+
    "\1\u022e\7\0\1\203\17\0\1\203\4\0\2\201\15\203"+
    "\1\0\1\u01cc\1\0\1\234\4\0\1\235\2\0\23\203"+
    "\7\0\1\203\17\0\1\203\4\0\2\201\15\203\1\0"+
    "\1\203\1\0\1\234\4\0\1\235\2\0\1\203\1\u0265"+
    "\21\203\7\0\1\203\17\0\1\203\4\0\2\23\15\25"+
    "\1\0\1\25\1\0\1\234\4\0\1\235\2\0\4\25"+
    "\1\u0186\16\25\7\0\1\25\17\0\1\25\4\0\2\23"+
    "\15\25\1\0\1\25\1\0\1\234\4\0\1\235\2\0"+
    "\6\25\1\u0186\14\25\7\0\1\25\17\0\1\25\4\0"+
    "\2\23\15\25\1\0\1\25\1\0\1\234\4\0\1\235"+
    "\2\0\13\25\1\u0186\7\25\7\0\1\25\17\0\1\25"+
    "\4\0\2\23\15\25\1\0\1\25\1\0\1\234\4\0"+
    "\1\235\2\0\11\25\1\250\11\25\7\0\1\25\17\0"+
    "\1\25\4\0\2\23\7\25\1\u0266\5\25\1\0\1\25"+
    "\1\0\1\234\4\0\1\235\2\0\23\25\7\0\1\25"+
    "\17\0\1\25\4\0\2\23\15\25\1\0\1\25\1\0"+
    "\1\234\4\0\1\235\2\0\6\25\1\u0267\14\25\7\0"+
    "\1\25\17\0\1\25\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34675];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\11\43\1\4\11\2\1\5\11\7\1\1\11"+
    "\14\1\5\11\11\1\1\11\3\1\1\11\2\1\1\11"+
    "\20\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\27\1\1\11\1\0\1\1\3\0\1\1\6\0\10\1"+
    "\1\0\2\1\1\0\3\1\2\11\1\1\3\0\3\11"+
    "\1\1\3\11\40\1\5\11\1\1\2\0\2\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\3\11\2\1\1\11\1\1\1\11\1\1\2\11\1\0"+
    "\3\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\3\11\1\0\2\11\2\0\1\11\6\1"+
    "\1\0\1\1\3\0\1\1\1\0\1\1\2\11\46\1"+
    "\1\0\1\1\1\11\7\1\1\0\1\1\1\0\4\1"+
    "\1\11\4\1\1\11\1\1\1\11\4\1\4\0\1\1"+
    "\1\11\41\1\12\11\1\1\6\11\1\0\5\1\2\0"+
    "\62\1\3\0\1\11\27\1\1\11\3\1\1\11\34\1"+
    "\1\0\20\1\1\11\22\1\1\0\31\1\1\11\5\1"+
    "\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private boolean stringJustBegun;

  private IElementType characterClassType;

  private final Stack<Integer> stack = new Stack<Integer>();

  private final List<Character> operationSigns = Arrays.asList('+', '-', '*', '/', '%', '&', '<', '>', '!');

  private final Stack<Integer> bracesInsideInterpolation = new Stack<Integer>();;

  /**
   * Push the actual state on top of the stack
   */
  private void pushState() {
    stack.push(yystate());
  }

  /**
   * Push the actual state on top of the stack
   * and change into another state
   *
   * @param state The new state
   */
  private void pushStateAndBegin(int state) {
    stack.push(yystate());
    yybegin(state);
  }

  /**
   * Pop the last state from the stack and change to it.
   * If the stack is empty, go to YYINITIAL
   */
  private void popState() {
    if (!stack.empty()) {
      yybegin(stack.pop());
    } else {
      pushStateAndBegin(YYINITIAL);
    }
  }

  /**
   * Push the stream back to the position before the text match
   *
   * @param text The text to match
   * @return true when matched
   */
  private boolean pushBackTo(String text) {
    final int position = yytext().toString().indexOf(text);

    if (position != -1) {
      yypushback(yylength() - position);
      return true;
    }

    return false;
  }

  private void startInterpolation() {
    bracesInsideInterpolation.push(0);
  }

  private boolean pushBackToObjectKey() {
    int position = yytext().toString().lastIndexOf(":");
    if (position > 0) {
      position--;
      while (position > 0 && (yytext().toString().charAt(position) == ' ' || yytext().toString().charAt(position) == '\t')) {
        position--;
      }
      position++;
      yypushback(yylength() - position);
      return true;
    }
    return false;
  }

  private boolean isInsideInterpolation() {
      return stack.contains(YYINTERPOLATION);
    }

    private void popUntilInterpolation() {
      while (stack.size() > 0 && stack.get(stack.size() - 1) != YYINTERPOLATION) {
        popState();
      }
      if (stack.size() > 0) {
        popState();
      }
    }

    private void beginState(int state) {
      if (state == YYINITIAL && isInsideInterpolation()) {
        state = YYNORMAL;
      }
      yybegin(state);
    }


  /**
   * Push the stream back to the position before the text match
   * and change into the given state
   *
   * @param text The text to match
   * @param state The new state
   * @return true when matched
   */
  private boolean pushBackAndState(String text, int state) {
    final boolean success = pushBackTo(text);

    if (success) {
      pushStateAndBegin(state);
    }

    return success;
  }

  private char previousChar() {
    final int loc = getTokenStart() - 1;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private boolean isOperationSign(char c) {
    return operationSigns.contains(c);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CjsxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 4742) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 127: 
          { popState();
                                return CoffeeScriptTokenTypes.OR_EQ;
          }
        case 191: break;
        case 144: 
          { return CoffeeScriptTokenTypes.FLOOR_EQ;
          }
        case 192: break;
        case 134: 
          { pushBackToObjectKey();
                                return CoffeeScriptTokenTypes.IDENTIFIER;
          }
        case 193: break;
        case 68: 
          { popState(); pushStateAndBegin(YYIDENTIFIER);
                                return CoffeeScriptTokenTypes.IDENTIFIER;
          }
        case 194: break;
        case 83: 
          { return CoffeeScriptTokenTypes.GE;
          }
        case 195: break;
        case 48: 
          { popState();
                                return CoffeeScriptTokenTypes.MULT;
          }
        case 196: break;
        case 165: 
          { return CoffeeScriptTokenTypes.GT_GT_GT_EQ;
          }
        case 197: break;
        case 62: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { popState();
                                pushStateAndBegin(YYREGEXFLAG);
                                return CoffeeScriptTokenTypes.REGEX_END;
          }
        case 198: break;
        case 49: 
          { popState();
                                return CoffeeScriptTokenTypes.PERC;
          }
        case 199: break;
        case 38: 
          { popState();
                                return CoffeeScriptTokenTypes.MINUS;
          }
        case 200: break;
        case 22: 
          { return CoffeeScriptTokenTypes.PARENTHESIS_START;
          }
        case 201: break;
        case 29: 
          { return CoffeeScriptTokenTypes.AND;
          }
        case 202: break;
        case 101: 
          { return CoffeeScriptTokenTypes.MODULO;
          }
        case 203: break;
        case 10: 
          { return CoffeeScriptTokenTypes.EQ;
          }
        case 204: break;
        case 145: 
          { pushStateAndBegin(YYHEREGEX);
                                return CoffeeScriptTokenTypes.HEREGEX_START;
          }
        case 205: break;
        case 46: 
          { popState();
                                return CoffeeScriptTokenTypes.COMMA;
          }
        case 206: break;
        case 6: 
          { return CoffeeScriptTokenTypes.PLUS;
          }
        case 207: break;
        case 170: 
          { popState();
                                return CoffeeScriptTokenTypes.GT_GT_GT_EQ;
          }
        case 208: break;
        case 69: 
          { yybegin(YYNORMAL);
                                return CoffeeScriptTokenTypes.BRACKET_START;
          }
        case 209: break;
        case 168: 
          { return CoffeeScriptTokenTypes.NOT_EQ_EQ;
          }
        case 210: break;
        case 23: 
          { return CoffeeScriptTokenTypes.PARENTHESIS_END;
          }
        case 211: break;
        case 21: 
          { pushStateAndBegin(YYJAVASCRIPT);
                                return CoffeeScriptTokenTypes.JAVASCRIPT_LITERAL;
          }
        case 212: break;
        case 57: 
          { yypushback(yytext().length());
                                popState();
          }
        case 213: break;
        case 133: 
          { pushStateAndBegin(YYNORMAL);
                                startInterpolation();
                                return CoffeeScriptTokenTypes.INTERPOLATION_START;
          }
        case 214: break;
        case 112: 
          { popState();
                                return CoffeeScriptTokenTypes.GT_GT;
          }
        case 215: break;
        case 180: 
          { return CoffeeScriptTokenTypes.WHILE;
          }
        case 216: break;
        case 173: 
          { return CoffeeScriptTokenTypes.BREAK;
          }
        case 217: break;
        case 93: 
          { return CoffeeScriptTokenTypes.DIV_EQ;
          }
        case 218: break;
        case 123: 
          { popState();
                                return CoffeeScriptTokenTypes.PERC_EQ;
          }
        case 219: break;
        case 154: 
          { popState();
                                return CoffeeScriptTokenTypes.GT_GT_GT;
          }
        case 220: break;
        case 160: 
          { popState();
                                return CoffeeScriptTokenTypes.AND_AND_EQ;
          }
        case 221: break;
        case 185: 
          { return CoffeeScriptTokenTypes.DELETE_KEYWORD;
          }
        case 222: break;
        case 143: 
          { pushStateAndBegin(YYFOR);
                                return CoffeeScriptTokenTypes.FOR;
          }
        case 223: break;
        case 167: 
          { return CoffeeScriptTokenTypes.LOOP;
          }
        case 224: break;
        case 117: 
          { popState();
                                return CoffeeScriptTokenTypes.DIV_EQ;
          }
        case 225: break;
        case 15: 
          { return CoffeeScriptTokenTypes.BRACKET_START;
          }
        case 226: break;
        case 115: 
          { popState();
                                return CoffeeScriptTokenTypes.NE;
          }
        case 227: break;
        case 32: 
          { return CoffeeScriptTokenTypes.EXIST;
          }
        case 228: break;
        case 74: 
          { return CoffeeScriptTokenTypes.IN_KEYWORD;
          }
        case 229: break;
        case 132: 
          { return CoffeeScriptTokenTypes.ESCAPE_SEQUENCE;
          }
        case 230: break;
        case 162: 
          { popState();
                                return CoffeeScriptTokenTypes.HEREGEX_END;
          }
        case 231: break;
        case 119: 
          { popState();
                                return CoffeeScriptTokenTypes.LE;
          }
        case 232: break;
        case 172: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { popState();
                                pushStateAndBegin(YYREGEXFLAG);
                                return CoffeeScriptTokenTypes.HEREGEX_END;
          }
        case 233: break;
        case 109: 
          { popState();
                                return CoffeeScriptTokenTypes.PLUS_EQ;
          }
        case 234: break;
        case 111: 
          { popState();
                                return CoffeeScriptTokenTypes.MINUS_EQ;
          }
        case 235: break;
        case 98: 
          { return CoffeeScriptTokenTypes.MULT_EQ;
          }
        case 236: break;
        case 26: 
          { return CoffeeScriptTokenTypes.LT;
          }
        case 237: break;
        case 177: 
          { return CoffeeScriptTokenTypes.UNTIL;
          }
        case 238: break;
        case 163: 
          { if (pushBackTo("::")) {
                                  pushStateAndBegin(YYCLASSNAME);
                                  return CoffeeScriptTokenTypes.IDENTIFIER;
                                }
                                pushBackTo(":");
                                return CoffeeScriptTokenTypes.IDENTIFIER;
          }
        case 239: break;
        case 142: 
          { return CoffeeScriptTokenTypes.NEW_KEYWORD;
          }
        case 240: break;
        case 91: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { char c = previousChar();
                                if (c == '=' || c == ' ' || c == ':' || c == '(' || c == '[' || c == '{' || c == ',' || c == (char) -1 || c == '\n' || isOperationSign(c)) {
                                  pushStateAndBegin(YYREGEX);
                                  return CoffeeScriptTokenTypes.REGEX_START;
                                } else {
                                  return CoffeeScriptTokenTypes.DIV;
                                }
          }
        case 241: break;
        case 153: 
          { popState();
                                return CoffeeScriptTokenTypes.SPLAT;
          }
        case 242: break;
        case 58: 
          { if (!stringJustBegun) {
                                  popState();
                                }
                                stringJustBegun = false;

                                return CoffeeScriptTokenTypes.STRING_LITERAL;
          }
        case 243: break;
        case 73: 
          { return CoffeeScriptTokenTypes.BOOL;
          }
        case 244: break;
        case 122: 
          { popState();
                                return CoffeeScriptTokenTypes.POWER;
          }
        case 245: break;
        case 84: 
          { return CoffeeScriptTokenTypes.FUNCTION_BIND;
          }
        case 246: break;
        case 157: 
          { popState();
                                return CoffeeScriptTokenTypes.LT_LT_EQ;
          }
        case 247: break;
        case 176: 
          { return CoffeeScriptTokenTypes.THROW;
          }
        case 248: break;
        case 178: 
          { return CoffeeScriptTokenTypes.YIELD_KEYWORD;
          }
        case 249: break;
        case 94: 
          { return CoffeeScriptTokenTypes.FLOOR;
          }
        case 250: break;
        case 164: 
          { return CoffeeScriptTokenTypes.ELSE;
          }
        case 251: break;
        case 52: 
          { popState();
                                return CoffeeScriptTokenTypes.XOR;
          }
        case 252: break;
        case 70: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return CoffeeScriptTokenTypes.SKIP_EOL;
          }
        case 253: break;
        case 44: 
          { popState();
                                return CoffeeScriptTokenTypes.PARENTHESIS_START;
          }
        case 254: break;
        case 149: 
          { return CoffeeScriptTokenTypes.POWER_EQ;
          }
        case 255: break;
        case 116: 
          { popState(); return CjsxTokenType.DIV_GT;
          }
        case 256: break;
        case 27: 
          { return CoffeeScriptTokenTypes.MULT;
          }
        case 257: break;
        case 7: 
          { return CoffeeScriptTokenTypes.COLON;
          }
        case 258: break;
        case 3: 
          { pushStateAndBegin(YYIDENTIFIER);
                                return CoffeeScriptTokenTypes.IDENTIFIER;
          }
        case 259: break;
        case 28: 
          { return CoffeeScriptTokenTypes.PERC;
          }
        case 260: break;
        case 105: 
          { return CoffeeScriptTokenTypes.XOR_EQ;
          }
        case 261: break;
        case 135: 
          { return CoffeeScriptTokenTypes.OR_OR_EQ;
          }
        case 262: break;
        case 31: 
          { return CoffeeScriptTokenTypes.XOR;
          }
        case 263: break;
        case 76: 
          { return CoffeeScriptTokenTypes.PLUS_PLUS;
          }
        case 264: break;
        case 175: 
          { return CoffeeScriptTokenTypes.CLASS;
          }
        case 265: break;
        case 155: 
          { popState();
                                return CoffeeScriptTokenTypes.GT_GT_EQ;
          }
        case 266: break;
        case 128: 
          { popState();
                                return CoffeeScriptTokenTypes.XOR_EQ;
          }
        case 267: break;
        case 56: 
          { return CoffeeScriptTokenTypes.STRING_LITERAL;
          }
        case 268: break;
        case 130: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return CoffeeScriptTokenTypes.STRING_LITERAL;
          }
        case 269: break;
        case 141: 
          { return CoffeeScriptTokenTypes.TRY;
          }
        case 270: break;
        case 72: 
          { return CoffeeScriptTokenTypes.OR_OR;
          }
        case 271: break;
        case 138: 
          { return CoffeeScriptTokenTypes.GT_GT_GT;
          }
        case 272: break;
        case 151: 
          { return CoffeeScriptTokenTypes.AND_AND_EQ;
          }
        case 273: break;
        case 75: 
          { return CoffeeScriptTokenTypes.RANGE;
          }
        case 274: break;
        case 19: 
          { stringJustBegun = true;
                                yypushback(1);
                                pushStateAndBegin(YYDOUBLEQUOTESTRING);
          }
        case 275: break;
        case 60: 
          { pushBackTo("'''");
                                return CoffeeScriptTokenTypes.HEREDOC;
          }
        case 276: break;
        case 90: 
          { return CoffeeScriptTokenTypes.NE;
          }
        case 277: break;
        case 80: 
          { return CoffeeScriptTokenTypes.FUNCTION;
          }
        case 278: break;
        case 97: 
          { return CoffeeScriptTokenTypes.LT_LT;
          }
        case 279: break;
        case 184: 
          { return CoffeeScriptTokenTypes.SWITCH;
          }
        case 280: break;
        case 179: 
          { return CoffeeScriptTokenTypes.SUPER;
          }
        case 281: break;
        case 136: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (yystate() != YYINITIAL && yystate() != YYNORMAL) {
                                                                                        popState();
                                                                                      }
                                                                                      pushStateAndBegin(YYQUOTEPROPERTY);
                                                                                      yypushback(yylength());
          }
        case 282: break;
        case 55: 
          { popState();
                                return CoffeeScriptTokenTypes.JAVASCRIPT_LITERAL;
          }
        case 283: break;
        case 159: 
          { popState();
                                return CoffeeScriptTokenTypes.MODULO_EQ;
          }
        case 284: break;
        case 95: 
          { return CoffeeScriptTokenTypes.LE;
          }
        case 285: break;
        case 63: 
          { return CoffeeScriptTokenTypes.HEREGEX_TOKEN;
          }
        case 286: break;
        case 42: 
          { popState();
                                return CoffeeScriptTokenTypes.BRACKET_START;
          }
        case 287: break;
        case 87: 
          { return CoffeeScriptTokenTypes.EQ_EQ_EQ;
          }
        case 288: break;
        case 110: 
          { popState();
                                return CoffeeScriptTokenTypes.PROTOTYPE;
          }
        case 289: break;
        case 20: 
          { stringJustBegun = true;
                                yypushback(1);
                                pushStateAndBegin(YYSINGLEQUOTESTRING);
          }
        case 290: break;
        case 13: 
          { return CoffeeScriptTokenTypes.EXCL;
          }
        case 291: break;
        case 16: 
          { return CoffeeScriptTokenTypes.BRACKET_END;
          }
        case 292: break;
        case 39: 
          { popState();
                                return CoffeeScriptTokenTypes.GT;
          }
        case 293: break;
        case 129: 
          { popState();
                                return CoffeeScriptTokenTypes.EXIST_EQ;
          }
        case 294: break;
        case 121: 
          { popState();
                                return CoffeeScriptTokenTypes.MULT_EQ;
          }
        case 295: break;
        case 45: 
          { popState();
                                return CoffeeScriptTokenTypes.PARENTHESIS_END;
          }
        case 296: break;
        case 190: 
          { return CoffeeScriptTokenTypes.INSTANCEOF_KEYWORD;
          }
        case 297: break;
        case 64: 
          { popState();
                                yypushback(1);
          }
        case 298: break;
        case 125: 
          { popState();
                                return CoffeeScriptTokenTypes.AND_EQ;
          }
        case 299: break;
        case 66: 
          { popState();
                                return CoffeeScriptTokenTypes.INTERPOLATION_END;
          }
        case 300: break;
        case 17: 
          { pushState();
                                if (isInsideInterpolation()) {
                                  int previous = bracesInsideInterpolation.pop();
                                  bracesInsideInterpolation.push(previous + 1);
                                }
                                return CoffeeScriptTokenTypes.BRACE_START;
          }
        case 301: break;
        case 89: 
          { yypushback(1);
                                return CoffeeScriptTokenTypes.IDENTIFIER;
          }
        case 302: break;
        case 53: 
          { popState();
                                return CoffeeScriptTokenTypes.EXIST;
          }
        case 303: break;
        case 104: 
          { return CoffeeScriptTokenTypes.OR_EQ;
          }
        case 304: break;
        case 161: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { popState();
                                return CoffeeScriptTokenTypes.HEREDOC_END;
          }
        case 305: break;
        case 81: 
          { return CoffeeScriptTokenTypes.MINUS_EQ;
          }
        case 306: break;
        case 51: 
          { popState();
                                return CoffeeScriptTokenTypes.OR;
          }
        case 307: break;
        case 103: 
          { return CoffeeScriptTokenTypes.AND_AND;
          }
        case 308: break;
        case 8: 
          { return CoffeeScriptTokenTypes.MINUS;
          }
        case 309: break;
        case 166: 
          { return CoffeeScriptTokenTypes.THEN;
          }
        case 310: break;
        case 102: 
          { return CoffeeScriptTokenTypes.AND_EQ;
          }
        case 311: break;
        case 156: 
          { popState();
                                return CoffeeScriptTokenTypes.FLOOR_EQ;
          }
        case 312: break;
        case 174: 
          { return CoffeeScriptTokenTypes.CATCH;
          }
        case 313: break;
        case 25: 
          { return CoffeeScriptTokenTypes.COMMA;
          }
        case 314: break;
        case 43: 
          { popState();
                                return CoffeeScriptTokenTypes.BRACKET_END;
          }
        case 315: break;
        case 92: 
          { return CjsxTokenType.DIV_GT;
          }
        case 316: break;
        case 148: 
          { return CoffeeScriptTokenTypes.LT_LT_EQ;
          }
        case 317: break;
        case 4: 
          { pushStateAndBegin(YYNUMBER);
                                return CoffeeScriptTokenTypes.NUMBER;
          }
        case 318: break;
        case 171: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return CoffeeScriptTokenTypes.OWN;
          }
        case 319: break;
        case 139: 
          { return CoffeeScriptTokenTypes.GT_GT_EQ;
          }
        case 320: break;
        case 2: 
          { return CoffeeScriptTokenTypes.WHITE_SPACE;
          }
        case 321: break;
        case 114: 
          { popState();
                                return CoffeeScriptTokenTypes.EQ_EQ;
          }
        case 322: break;
        case 82: 
          { return CoffeeScriptTokenTypes.GT_GT;
          }
        case 323: break;
        case 186: 
          { return CoffeeScriptTokenTypes.EXTENDS;
          }
        case 324: break;
        case 61: 
          { return JSTokenTypes.REGEXP_LITERAL;
          }
        case 325: break;
        case 65: 
          { popState();
                                return CoffeeScriptTokenTypes.REGEX_FLAG;
          }
        case 326: break;
        case 36: 
          { popState();
                                return CoffeeScriptTokenTypes.PLUS;
          }
        case 327: break;
        case 146: 
          { pushStateAndBegin(YYDOUBLEQUOTEHEREDOC);
                                return CoffeeScriptTokenTypes.HEREDOC_START;
          }
        case 328: break;
        case 41: 
          { popState();
                                return CoffeeScriptTokenTypes.DIV;
          }
        case 329: break;
        case 118: 
          { popState();
                                return CoffeeScriptTokenTypes.FLOOR;
          }
        case 330: break;
        case 79: 
          { return CoffeeScriptTokenTypes.MINUS_MINUS;
          }
        case 331: break;
        case 113: 
          { popState();
                                return CoffeeScriptTokenTypes.GE;
          }
        case 332: break;
        case 34: 
          { popState();
                                return CoffeeScriptTokenTypes.WHITE_SPACE;
          }
        case 333: break;
        case 150: 
          { return CoffeeScriptTokenTypes.MODULO_EQ;
          }
        case 334: break;
        case 169: 
          { return CoffeeScriptTokenTypes.WHEN;
          }
        case 335: break;
        case 37: 
          { popState();
                                return CoffeeScriptTokenTypes.COLON;
          }
        case 336: break;
        case 14: 
          { return CoffeeScriptTokenTypes.DIV;
          }
        case 337: break;
        case 40: 
          { popState();
                                return CoffeeScriptTokenTypes.EQ;
          }
        case 338: break;
        case 12: 
          { return CoffeeScriptTokenTypes.TILDE;
          }
        case 339: break;
        case 96: 
          { return CjsxTokenType.LT_DIV;
          }
        case 340: break;
        case 78: 
          { return CoffeeScriptTokenTypes.PROTOTYPE;
          }
        case 341: break;
        case 67: 
          { popState();
                                return CoffeeScriptTokenTypes.IDENTIFIER;
          }
        case 342: break;
        case 9: 
          { return CoffeeScriptTokenTypes.GT;
          }
        case 343: break;
        case 131: 
          { yypushback(2);
                                pushStateAndBegin(YYINTERPOLATION);
          }
        case 344: break;
        case 24: 
          { return CoffeeScriptTokenTypes.SEMICOLON;
          }
        case 345: break;
        case 1: 
          { stack.clear();
                                beginState(YYINITIAL);
                                return CoffeeScriptTokenTypes.BAD_CHARACTER;
          }
        case 346: break;
        case 106: 
          { return CoffeeScriptTokenTypes.EXIST_EQ;
          }
        case 347: break;
        case 107: 
          { popState();
                                return CoffeeScriptTokenTypes.OR_OR;
          }
        case 348: break;
        case 126: 
          { popState();
                                return CoffeeScriptTokenTypes.AND_AND;
          }
        case 349: break;
        case 100: 
          { return CoffeeScriptTokenTypes.PERC_EQ;
          }
        case 350: break;
        case 35: 
          { popState();
                                return CoffeeScriptTokenTypes.DOT;
          }
        case 351: break;
        case 108: 
          { popState();
                                return CoffeeScriptTokenTypes.RANGE;
          }
        case 352: break;
        case 147: 
          { pushStateAndBegin(YYSINGLEQUOTEHEREDOC);
                                return CoffeeScriptTokenTypes.HEREDOC_START;
          }
        case 353: break;
        case 120: 
          { popState();
                                return CoffeeScriptTokenTypes.LT_LT;
          }
        case 354: break;
        case 182: 
          { return CoffeeScriptTokenTypes.RETURN;
          }
        case 355: break;
        case 18: 
          { pushStateAndBegin(YYTHIS);
                                return CoffeeScriptTokenTypes.THIS;
          }
        case 356: break;
        case 137: 
          { return CoffeeScriptTokenTypes.SPLAT;
          }
        case 357: break;
        case 189: 
          { return CoffeeScriptTokenTypes.DEBUGGER;
          }
        case 358: break;
        case 30: 
          { return CoffeeScriptTokenTypes.OR;
          }
        case 359: break;
        case 99: 
          { return CoffeeScriptTokenTypes.POWER;
          }
        case 360: break;
        case 188: 
          { return CoffeeScriptTokenTypes.CONTINUE;
          }
        case 361: break;
        case 5: 
          { return CoffeeScriptTokenTypes.DOT;
          }
        case 362: break;
        case 85: 
          { return CoffeeScriptTokenTypes.EQ_EQ ;
          }
        case 363: break;
        case 86: 
          { return CoffeeScriptTokenTypes.DO_KEYWORD;
          }
        case 364: break;
        case 88: 
          { return CoffeeScriptTokenTypes.IF;
          }
        case 365: break;
        case 54: 
          { return CoffeeScriptTokenTypes.JAVASCRIPT;
          }
        case 366: break;
        case 59: 
          { if (!pushBackAndState("#{", YYINTERPOLATION)) {
                                  pushBackTo("\"\"\"");
                                } else {
                                }
                                if (yylength() != 0) {
                                  return CoffeeScriptTokenTypes.HEREDOC;
                                }
          }
        case 367: break;
        case 77: 
          { return CoffeeScriptTokenTypes.PLUS_EQ;
          }
        case 368: break;
        case 183: 
          { return CoffeeScriptTokenTypes.UNLESS;
          }
        case 369: break;
        case 71: 
          { return CoffeeScriptTokenTypes.BY;
          }
        case 370: break;
        case 33: 
          { if (isInsideInterpolation()) {

                                  int value = bracesInsideInterpolation.peek();
                                  if (value == 0) {
                                    popUntilInterpolation();
                                    yypushback(1);
                                    bracesInsideInterpolation.pop();
                                  } else {
                                    int previous = bracesInsideInterpolation.pop();
                                    bracesInsideInterpolation.push(previous - 1);
                                    return CoffeeScriptTokenTypes.BRACE_END;
                                  }
                                } else {
                                  return CoffeeScriptTokenTypes.BRACE_END;
                                }
          }
        case 371: break;
        case 11: 
          { return CoffeeScriptTokenTypes.LINE_COMMENT;
          }
        case 372: break;
        case 158: 
          { popState();
                                return CoffeeScriptTokenTypes.POWER_EQ;
          }
        case 373: break;
        case 181: 
          { return CoffeeScriptTokenTypes.TYPEOF_KEYWORD;
          }
        case 374: break;
        case 140: 
          { return CoffeeScriptTokenTypes.BLOCK_COMMENT;
          }
        case 375: break;
        case 47: 
          { popState();
                                return CoffeeScriptTokenTypes.LT;
          }
        case 376: break;
        case 124: 
          { popState();
                                return CoffeeScriptTokenTypes.MODULO;
          }
        case 377: break;
        case 187: 
          { return CoffeeScriptTokenTypes.FINALLY;
          }
        case 378: break;
        case 50: 
          { popState();
                                return CoffeeScriptTokenTypes.AND;
          }
        case 379: break;
        case 152: 
          { popState();
                                return CoffeeScriptTokenTypes.OR_OR_EQ;
          }
        case 380: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
